<?php
/**
 * {{classname}}
 *
 * PHP version 7.1
 *
 * @package {{apiPackage}}
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 {{#appName}}
 * {{{appName}}}
 *
 {{/appName}}
 {{#appDescription}}
 * {{{appDescription}}}
 {{/appDescription}}
 {{#version}}
 * The version of the OpenAPI document: {{{version}}}
 {{/version}}
 {{#infoEmail}}
 * Contact: {{{infoEmail}}}
 {{/infoEmail}}
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace {{apiPackage}};

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Exception;
use Psr\Log\LoggerInterface;
use OpenAPIServer\Auth\AuthUser;
use OpenAPIServer\DB\Database;
use Awurth\SlimValidation\Validator;
use Respect\Validation\Validator as V;
use OpenAPIServer\ValidationRules;
use OpenAPIServer\Exceptions\InputValidationException;
use OpenAPIServer\Exceptions\ConflictException;
use OpenAPIServer\Exceptions\InvalidJsonException;
use OpenAPIServer\Auth\Middleware\TokenAuthentication\Exceptions\ForbiddenException;

/**
 * {{classname}} Class Doc Comment
 *
 * @package {{apiPackage}}
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class {{classname}}
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;
    
    /**
     * @var LoggerInterface|null The logger
     */
    protected $logger;

    /**
     * @var PDO|null The PDO database object
     */
    protected $db;

    /**
     * @var AuthUser|null User object if authenticated
     */
    protected $authUser;

    /**
     * @var Validator|null Validator helper class
     */
    protected $v;

    /**
     * @var array|null Validations rules
     */
    protected $rules;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null, LoggerInterface $logger, Database $db, Validator $validator)
    {
        $this->container = $container;
        $this->logger = $logger;
        $this->db = $db;
        $this->v = $validator;
        if ($container->has('auth_user')) {
            $this->authUser = $container->get('auth_user');
        }

        // Load custom rules
        V::with('OpenAPIServer\\ValidationRules\\');

        /**
         * This formats only define validation regarding format and length
         * To check for mandatory fields and eg right postcode per country,
         * use extra validation per operation.
         */
        $this->rules = [
            //to populate
        ];
    }

    {{#operations}}
    {{#operation}}

    /**
     * {{httpMethod}} {{operationId}}
     {{#summary}}
     * Summary: {{summary}}
     {{/summary}}
     {{#notes}}
     * Notes: {{notes}}
     {{/notes}}
     {{#hasProduces}}
     * Output-Formats: [{{#produces}}{{{mediaType}}}{{#hasMore}}, {{/hasMore}}{{/produces}}]
     {{/hasProduces}}
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws Exception to force implementation class to override this method
     *
     * Allowed roles: {{#hasAuthMethods}}{{#authMethods}}{{name}}{{#hasMore}}, {{/hasMore}}{{/authMethods}}{{/hasAuthMethods}}
     */
    public function {{operationId}}(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        {{#hasHeaderParams}}
        $headers = $request->getHeaders();
        {{#headerParams}}
        ${{paramName}} = $request->hasHeader('{{baseName}}') ? $headers['{{baseName}}'] : null;
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#hasPathParams}}
        
        // VALIDATE PATH PARAMETERS
        $this->v->validate($args, [
        {{#pathParams}}       
            '{{baseName}}' => $this->rules['{{baseName}}']{{#hasMore}},{{/hasMore}}
        {{/pathParams}}
        ]);
        if (!$this->v->isValid()) {
            throw new InputValidationException($this->v->getErrors());
        }
        {{/hasPathParams}}
        {{#hasBodyParam}}
        
        // VALIDATE BODY
        $body = $request->getParsedBody();
        if ($body === null) {
            // Not a valid Json provided
            throw new InvalidJsonException();
        }
        // Load custom rules
        V::with('OpenAPIServer\\ValidationRules\\');
        $expectedFields = [
            //to populate
        ];
        $this->v->validate($body, $expectedFields);
        if (!$this->v->isValid()) {
            throw new InputValidationException($this->v->getErrors());
        }
        {{/hasBodyParam}}
        {{#hasFormParams}}
        {{#formParams}}
        {{#hasQueryParams}}
        $queryParams = $request->getQueryParams();
        {{#queryParams}}
        ${{paramName}} = (key_exists('{{baseName}}', $queryParams)) ? $queryParams['{{baseName}}'] : null;
        {{/queryParams}}
        {{/hasQueryParams}}
        
        {{^isFile}}
        ${{paramName}} = (isset($body['{{baseName}}'])) ? $body['{{baseName}}'] : null;
        {{/isFile}}
        {{#isFile}}
        {{#isMultipart}}
        ${{paramName}} = (key_exists('{{baseName}}', $request->getUploadedFiles())) ? $request->getUploadedFiles()['{{baseName}}'] : null;
        {{/isMultipart}}
        {{^isMultipart}}
        ${{paramName}} = (isset($body['{{baseName}}'])) ? $body['{{baseName}}'] : null;
        {{/isMultipart}}
        {{/isFile}}
        {{/formParams}}
        {{/hasFormParams}}
        
        // DATABASE OPERATION
        $message = "How about implementing {{nickname}} as a {{httpMethod}} method in {{apiPackage}}\{{userClassname}} class?";
        throw new Exception($message);

        // RETURN DATA
        $statusCode = 999;
        $data = [
            //to populate
        ];
        $payload = json_encode($data);
        $response->getBody()->write($payload);
        return $response
                  ->withHeader('Content-Type', 'application/json')
                  ->withStatus($statusCode);
    }
    {{/operation}}
    {{/operations}}
}
